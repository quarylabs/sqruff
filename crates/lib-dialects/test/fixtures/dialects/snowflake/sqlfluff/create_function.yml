file:
- statement:
  - create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_name:
      - function_name_identifier: pi_udf
    - function_parameter_list:
      - bracketed:
        - start_bracket: (
        - end_bracket: )
    - keyword: RETURNS
    - data_type:
      - data_type_identifier: FLOAT
    - keyword: AS
    - udf_body: '''3.141592654::FLOAT'''
- statement_terminator: ;
- statement:
  - create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_name:
      - function_name_identifier: simple_table_function
    - function_parameter_list:
      - bracketed:
        - start_bracket: (
        - end_bracket: )
    - keyword: RETURNS
    - keyword: TABLE
    - bracketed:
      - start_bracket: (
      - column_definition:
        - naked_identifier: x
        - data_type:
          - data_type_identifier: INTEGER
      - comma: ','
      - column_definition:
        - naked_identifier: y
        - data_type:
          - data_type_identifier: INTEGER
      - end_bracket: )
    - keyword: AS
    - udf_body: |-
        $$
            SELECT 1, 2
            UNION ALL
            SELECT 3, 4
          $$
- statement_terminator: ;
- statement:
  - create_function_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: FUNCTION
    - function_name:
      - function_name_identifier: get_countries_for_user
    - function_parameter_list:
      - bracketed:
        - start_bracket: (
        - parameter: id
        - data_type:
          - data_type_identifier: number
        - end_bracket: )
    - keyword: RETURNS
    - keyword: TABLE
    - bracketed:
      - start_bracket: (
      - column_definition:
        - naked_identifier: country_code
        - data_type:
          - data_type_identifier: char
      - comma: ','
      - column_definition:
        - naked_identifier: country_name
        - data_type:
          - data_type_identifier: varchar
      - end_bracket: )
    - keyword: RETURNS
    - keyword: 'NULL'
    - keyword: ON
    - keyword: 'NULL'
    - keyword: INPUT
    - keyword: AS
    - udf_body: |-
        'select distinct c.country_code, c.country_name
              from user_addresses a, countries c
              where a.user_id = id
              and c.country_code = a.country_code'
- statement_terminator: ;
- statement:
  - create_function_statement:
    - keyword: CREATE
    - keyword: SECURE
    - keyword: FUNCTION
    - function_name:
      - function_name_identifier: js_factorial
    - function_parameter_list:
      - bracketed:
        - start_bracket: (
        - parameter: d
        - data_type:
          - data_type_identifier: double
        - end_bracket: )
    - keyword: RETURNS
    - data_type:
      - data_type_identifier: double
    - keyword: IMMUTABLE
    - keyword: LANGUAGE
    - keyword: JAVASCRIPT
    - keyword: STRICT
    - keyword: AS
    - udf_body: |-
        '
          if (D <= 0) {
            return 1;
          } else {
            var result = 1;
            for (var i = 2; i <= D; i++) {
              result = result * i;
            }
            return result;
          }
          '
- statement_terminator: ;
- statement:
  - create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - keyword: IF
    - keyword: NOT
    - keyword: EXISTS
    - function_name:
      - function_name_identifier: simple_table_function
    - function_parameter_list:
      - bracketed:
        - start_bracket: (
        - end_bracket: )
    - keyword: RETURNS
    - keyword: TABLE
    - bracketed:
      - start_bracket: (
      - column_definition:
        - naked_identifier: x
        - data_type:
          - data_type_identifier: INTEGER
      - comma: ','
      - column_definition:
        - naked_identifier: y
        - data_type:
          - data_type_identifier: INTEGER
      - end_bracket: )
    - keyword: LANGUAGE
    - keyword: SQL
    - keyword: AS
    - udf_body: |-
        $$
            SELECT 1, 2
            UNION ALL
            SELECT 3, 4
          $$
- statement_terminator: ;
- statement:
  - create_function_statement:
    - keyword: create
    - keyword: function
    - function_name:
      - function_name_identifier: my_decrement_udf
    - function_parameter_list:
      - bracketed:
        - start_bracket: (
        - parameter: i
        - data_type:
          - data_type_identifier: numeric
          - bracketed_arguments:
            - bracketed:
              - start_bracket: (
              - numeric_literal: '9'
              - comma: ','
              - numeric_literal: '0'
              - end_bracket: )
        - end_bracket: )
    - keyword: returns
    - data_type:
      - data_type_identifier: numeric
    - keyword: language
    - keyword: java
    - keyword: imports
    - comparison_operator:
      - raw_comparison_operator: =
    - bracketed:
      - start_bracket: (
      - quoted_literal: '''@~/my_decrement_udf_package_dir/my_decrement_udf_jar.jar'''
      - end_bracket: )
    - keyword: handler
    - comparison_operator:
      - raw_comparison_operator: =
    - quoted_literal: '''my_decrement_udf_package.my_decrement_udf_class.my_decrement_udf_method'''
- statement_terminator: ;
- statement:
  - create_function_statement:
    - keyword: create
    - keyword: or
    - keyword: replace
    - keyword: function
    - function_name:
      - function_name_identifier: echo_varchar
    - function_parameter_list:
      - bracketed:
        - start_bracket: (
        - parameter: x
        - data_type:
          - data_type_identifier: varchar
        - end_bracket: )
    - keyword: returns
    - data_type:
      - data_type_identifier: varchar
    - keyword: language
    - keyword: java
    - keyword: called
    - keyword: on
    - keyword: 'null'
    - keyword: input
    - keyword: handler
    - comparison_operator:
      - raw_comparison_operator: =
    - quoted_literal: '''TestFunc.echoVarchar'''
    - keyword: target_path
    - comparison_operator:
      - raw_comparison_operator: =
    - quoted_literal: '''@~/testfunc.jar'''
    - keyword: as
    - udf_body: |-
        'class TestFunc {
          public static String echoVarchar(String x) {
            return x;
          }
        }'
- statement_terminator: ;
- statement:
  - create_function_statement:
    - keyword: create
    - keyword: or
    - keyword: replace
    - keyword: function
    - function_name:
      - function_name_identifier: py_udf
    - function_parameter_list:
      - bracketed:
        - start_bracket: (
        - end_bracket: )
    - keyword: returns
    - data_type:
      - data_type_identifier: variant
    - keyword: language
    - keyword: python
    - keyword: runtime_version
    - comparison_operator:
      - raw_comparison_operator: =
    - quoted_literal: '''3.8'''
    - keyword: packages
    - comparison_operator:
      - raw_comparison_operator: =
    - bracketed:
      - start_bracket: (
      - quoted_literal: '''numpy'''
      - comma: ','
      - quoted_literal: '''pandas'''
      - comma: ','
      - quoted_literal: '''xgboost==1.5.0'''
      - end_bracket: )
    - keyword: handler
    - comparison_operator:
      - raw_comparison_operator: =
    - quoted_literal: '''udf'''
    - keyword: as
    - udf_body: |-
        $$
        import numpy as np
        import pandas as pd
        import xgboost as xgb
        def udf():
            return [np.__version__, pd.__version__, xgb.__version__]
        $$
- statement_terminator: ;
- statement:
  - create_function_statement:
    - keyword: create
    - keyword: or
    - keyword: replace
    - keyword: function
    - function_name:
      - function_name_identifier: dream
    - function_parameter_list:
      - bracketed:
        - start_bracket: (
        - parameter: i
        - data_type:
          - data_type_identifier: int
        - end_bracket: )
    - keyword: returns
    - data_type:
      - data_type_identifier: variant
    - keyword: language
    - keyword: python
    - keyword: runtime_version
    - comparison_operator:
      - raw_comparison_operator: =
    - quoted_literal: '''3.8'''
    - keyword: handler
    - comparison_operator:
      - raw_comparison_operator: =
    - quoted_literal: '''sleepy.snore'''
    - keyword: imports
    - comparison_operator:
      - raw_comparison_operator: =
    - bracketed:
      - start_bracket: (
      - quoted_literal: '''@my_stage/sleepy.py'''
      - end_bracket: )
- statement_terminator: ;
- statement:
  - create_function_statement:
    - keyword: create
    - keyword: or
    - keyword: replace
    - keyword: function
    - function_name:
      - function_name_identifier: addone
    - function_parameter_list:
      - bracketed:
        - start_bracket: (
        - parameter: i
        - data_type:
          - data_type_identifier: int
        - end_bracket: )
    - keyword: returns
    - data_type:
      - data_type_identifier: int
    - keyword: language
    - keyword: python
    - keyword: runtime_version
    - comparison_operator:
      - raw_comparison_operator: =
    - quoted_literal: '''3.8'''
    - keyword: handler
    - comparison_operator:
      - raw_comparison_operator: =
    - quoted_literal: '''addone_py'''
    - keyword: as
    - udf_body: |-
        $$
        def addone_py(i):
          return i+1
        $$
- statement_terminator: ;
- statement:
  - create_function_statement:
    - keyword: CREATE
    - keyword: OR
    - keyword: REPLACE
    - keyword: FUNCTION
    - function_name:
      - function_name_identifier: echo_varchar
    - function_parameter_list:
      - bracketed:
        - start_bracket: (
        - parameter: x
        - data_type:
          - data_type_identifier: VARCHAR
        - end_bracket: )
    - keyword: RETURNS
    - data_type:
      - data_type_identifier: VARCHAR
    - keyword: LANGUAGE
    - keyword: SCALA
    - keyword: RUNTIME_VERSION
    - comparison_operator:
      - raw_comparison_operator: =
    - quoted_literal: '''2.12'''
    - keyword: HANDLER
    - comparison_operator:
      - raw_comparison_operator: =
    - quoted_literal: '''Echo.echoVarchar'''
    - keyword: AS
    - udf_body: |-
        $$
        class Echo {
          def echoVarchar(x : String): String = {
            return x
          }
        }
        $$
- statement_terminator: ;
