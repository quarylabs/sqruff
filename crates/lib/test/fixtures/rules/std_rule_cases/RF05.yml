rule: RF05

test_fail_special_chars_create_table_space:
  fail_str:
    CREATE TABLE DBO.ColumnNames
    (
        "Internal Space" INT
    )

test_fail_special_chars_create_table_gt:
  fail_str:
    CREATE TABLE DBO.ColumnNames
    (
        "Greater>Than" INT
    )

test_fail_special_chars_create_table_lt:
  fail_str:
    CREATE TABLE DBO.ColumnNames
    (
        "Less<Than" INT
    )

test_fail_special_chars_create_table_lt_bigquery:
  fail_str:
    CREATE TABLE DBO.ColumnNames
    (
        `Less<Than` INT
    )
  configs:
    core:
      dialect: bigquery


test_pass_special_chars_create_table_none:
  pass_str:
    CREATE TABLE DBO.ColumnNames
    (
        "No_Internal_Space" INT,
        GreaterThan INT,
        LessThan INT,
        NumberVal INT
    )

test_pass_special_chars_create_table_none_quoted_tsql:
  pass_str:
    CREATE TABLE DBO.ColumnNames
    (
        [No_Internal_Space] INT,
        [GreaterThan] INT,
        [LessThan] INT,
        NumberVal INT
    )
  configs:
    core:
      dialect: tsql

test_pass_special_chars_create_table_none_quoted_biquery:
  pass_str:
    CREATE TABLE DBO.ColumnNames
    (
        `No_Internal_Space` INT,
        `GreaterThan` INT,
        `LessThan` INT,
        NumberVal INT
    )
  configs:
    core:
      dialect: bigquery

test_pass_special_chars_create_table_space_allowed:
  pass_str:
    CREATE TABLE DBO.ColumnNames
    (
        "Internal Space" INT
    )
  configs:
    rules:
      references.special_chars:
        allow_space_in_identifier: true

test_fail_special_chars_quoted_policy_alias:
  fail_str:
    SELECT a
    FROM DBO.ColumnNames as "alias with space"
  configs:
    rules:
      references.special_chars:
        quoted_identifiers_policy: aliases

test_fail_special_chars_quoted_policy_column_alias:
  fail_str:
    SELECT a as "alias with space"
    FROM DBO.ColumnNames
  configs:
    rules:
      references.special_chars:
        quoted_identifiers_policy: column_aliases


test_pass_special_chars_quoted_policy_aliases:
  pass_str:
    SELECT "column with space" as a
    FROM DBO.ColumnNames
  configs:
    rules:
      references.special_chars:
        quoted_identifiers_policy: aliases

test_pass_special_chars_quoted_policy_none:
  pass_str:
    SELECT "column with space" as "alias with space"
    FROM DBO.ColumnNames
  configs:
    rules:
      references.special_chars:
        quoted_identifiers_policy: none

test_pass_special_chars_unquoted_policy_aliases:
  pass_str:
    SELECT Number# as a
    FROM DBO.ColumnNames
  configs:
    rules:
      references.special_chars:
        unquoted_identifiers_policy: aliases
    core:
      dialect: tsql

test_pass_special_chars_unquoted_policy_column_aliases:
  pass_str:
    SELECT Number# as a
    FROM DBO.ColumnNames as AliasHash#
  configs:
    rules:
      references.special_chars:
        unquoted_identifiers_policy: column_aliases
    core:
      dialect: tsql

test_pass_special_chars_quoted_policy_column_aliases:
  pass_str:
    SELECT "column with space" as a
    FROM DBO.ColumnNames as "alias with space"
  configs:
    rules:
      references.special_chars:
        quoted_identifiers_policy: column_aliases

# T-SQL specific tests for valid syntax with special characters
test_fail_tsql_quoted_identifier_with_hash:
  # T-SQL uses square brackets for quoted identifiers with special chars
  fail_str:
    SELECT [col#name] FROM table1
  configs:
    rules:
      references.special_chars:
        quoted_identifiers_policy: all
    core:
      dialect: tsql

test_fail_tsql_quoted_identifier_with_space:
  fail_str:
    SELECT [column name] FROM table1
  configs:
    rules:
      references.special_chars:
        quoted_identifiers_policy: all
    core:
      dialect: tsql

test_fail_tsql_quoted_identifier_with_hyphen:
  fail_str:
    SELECT [col-name] FROM table1
  configs:
    rules:
      references.special_chars:
        quoted_identifiers_policy: all
    core:
      dialect: tsql

test_pass_tsql_quoted_identifier_with_special_chars_none_policy:
  # Should pass when quoted_identifiers_policy is none
  pass_str:
    SELECT [col#name], [column name], [col-name] FROM table1
  configs:
    rules:
      references.special_chars:
        quoted_identifiers_policy: none
    core:
      dialect: tsql

test_fail_tsql_quoted_alias_with_special_chars:
  fail_str:
    SELECT col1 as [alias#name], col2 as [alias with space] FROM table1
  configs:
    rules:
      references.special_chars:
        quoted_identifiers_policy: aliases
    core:
      dialect: tsql

test_pass_tsql_temp_table_no_special_chars:
  # Temp tables starting with # should not be flagged (no special chars after #)
  pass_str:
    SELECT * FROM #TempTable
  configs:
    rules:
      references.special_chars:
        unquoted_identifiers_policy: all
    core:
      dialect: tsql

test_pass_tsql_global_temp_table_no_special_chars:
  # Global temp tables starting with ## should not be flagged
  pass_str:
    SELECT * FROM ##GlobalTempTable
  configs:
    rules:
      references.special_chars:
        unquoted_identifiers_policy: all
    core:
      dialect: tsql

test_pass_dots_bigquery:
  pass_str:
    SELECT a
    FROM `user.schema.table`
  configs:
    core:
      dialect: bigquery

test_pass_star_bigquery:
  pass_str:
    SELECT a
    FROM `user.schema.table_*`
  configs:
    core:
      dialect: bigquery

test_fail_star_bigquery:
  fail_str:
    SELECT a
    FROM `user.schema.table_*_something`
  configs:
    core:
      dialect: bigquery

test_pass_hyphen_bigquery_quotes_1:
  # Passes without setting 'additional_allowed_characters' because RF05 allows
  # hyphens in BigQuery by default.
  pass_str:
    SELECT a
    FROM `user.schema.table-something`
  configs:
    core:
      dialect: bigquery

test_pass_hyphen_bigquery_quotes_2:
  # Passes because explicitly setting 'additional_allowed_characters' adds to the
  # default ("-") value.
  pass_str:
    SELECT a
    FROM `user.schema.table-some+thing`
  configs:
    core:
      dialect: bigquery
    rules:
      references.special_chars:
        additional_allowed_characters: '+'

test_pass_hyphen_bigquery_no_quotes:
  pass_str:
    SELECT a
    FROM user.schema.table-something
  configs:
    core:
      dialect: bigquery

test_pass_dot_bigquery:
  pass_str:
    SELECT a
    FROM `user.schema.table-something`
    WHERE `user.schema.table-something`.a = 1
  configs:
    core:
      dialect: bigquery
    rules:
      references.special_chars:
        additional_allowed_characters: '-.'

test_fail_single_quote_bigquery:
  fail_str:
    SELECT a
    FROM `user.schema.table'something`
  configs:
    core:
      dialect: bigquery
    rules:
      references.special_chars:
        additional_allowed_characters: '-.'

test_pass_single_quote_bigquery:
  pass_str:
    SELECT a
    FROM `user.schema.table'something`
  configs:
    core:
      dialect: bigquery
    rules:
      references.special_chars:
        additional_allowed_characters: '-''.'

test_pass_single_quote2_bigquery:
  pass_str:
    SELECT a
    FROM `user.schema.table'something`
  configs:
    core:
      dialect: bigquery
    rules:
      references.special_chars:
        additional_allowed_characters: "-'."

test_pass_dot_slash_identifier_in_file_reference_sparksql:
  pass_str:
    SELECT a
    FROM TEXT.`examples/src/main/resources/people.txt`
  configs:
    core:
      dialect: sparksql

test_pass_star_identifier_in_file_reference_sparksql:
  pass_str:
    SELECT a
    FROM TEXT.`//root/*.txt`;
  configs:
    core:
      dialect: sparksql

test_pass_question_mark_identifier_in_file_reference_sparksql:
  pass_str:
    SELECT a
    FROM TEXT.`//root/200?.txt`;
  configs:
    core:
      dialect: sparksql

test_pass_character_class_identifier_in_file_reference_sparksql:
  pass_str:
    SELECT a
    FROM TEXT.`//root/200[23].txt`;
  configs:
    core:
      dialect: sparksql

test_pass_negated_character_class_identifier_in_file_reference_sparksql:
  pass_str:
    SELECT a
    FROM TEXT.`//root/200[^23].txt`;
  configs:
    core:
      dialect: sparksql

test_pass_character_range_identifier_in_file_reference_sparksql:
  pass_str:
    SELECT a
    FROM TEXT.`//root/200[2-5].txt`;
  configs:
    core:
      dialect: sparksql

test_pass_negated_character_range_identifier_in_file_reference_sparksql:
  pass_str:
    SELECT a
    FROM TEXT.`//root/200[^2-5].txt`;
  configs:
    core:
      dialect: sparksql

test_pass_alteration_identifier_in_file_reference_sparksql:
  pass_str:
    SELECT a
    FROM TEXT.`//root/20{04, 05}.txt`;
  configs:
    core:
      dialect: sparksql

test_pass_ignore_lists_quoted:
  pass_str:
    SELECT a as 'aliashash#'
  configs:
    rules:
      references.special_chars:
        ignore_words: aliashash#

test_pass_ignore_lists_quoted_fail:
  fail_str:
    SELECT a as 'aliashash#'

test_pass_ignore_lists_quoted_mixed_case:
  pass_str:
    SELECT a as 'aliasHash#'
  configs:
    rules:
      references.special_chars:
        ignore_words: aliashash#

test_pass_ignore_lists_unquoted:
  pass_str:
    SELECT a as alias$
  configs:
    core:
      dialect: postgres
    rules:
      references.special_chars:
        ignore_words: alias$

test_pass_ignore_lists_unquoted_fail:
  fail_str:
    SELECT a as alias$
  configs:
    core:
      dialect: postgres

test_pass_ignore_lists_unquoted_mixed_case:
  pass_str:
    SELECT a as Alias$
  configs:
    core:
      dialect: postgres
    rules:
      references.special_chars:
        ignore_words: alias$

test_pass_ignore_words_regex_unquoted:
  pass_str:
    SELECT a as alias$
  configs:
    core:
      dialect: postgres
    rules:
      references.special_chars:
        ignore_words_regex: lias\$$

test_pass_ignore_words_regex_quoted:
  pass_str:
    SELECT a as 'aliashash#'
  configs:
    rules:
      references.special_chars:
        ignore_words_regex: hash#$

test_fail_ignore_words_regex_quoted_mixed_case:
  fail_str:
    SELECT a as 'aliasHash#'
  configs:
    rules:
      references.special_chars:
        ignore_words_regex: hash#$

test_pass_special_chars_show_tblproperties:
  pass_str:
    SHOW TBLPROPERTIES customer ('created.date');
  configs:
    core:
      dialect: sparksql

test_fail_special_chars_show_tblproperties:
  fail_str:
    SHOW TBLPROPERTIES customer ('created.*');
  configs:
    core:
      dialect: sparksql

test_pass_special_chars_redshift_hash_table:
  pass_str: |
    CREATE TABLE #example (
        id INT
    );
  configs:
    core:
      dialect: redshift

test_fail_special_chars_redshift_hash_column:
  fail_str: |
    CREATE TABLE example
    (
        "#example" INT
    )
  configs:
    core:
      dialect: redshift

# T-SQL comprehensive test for SQL Server 2017+ syntax with # at end
test_pass_tsql_identifier_hash_comprehensive:
  # SQL Server 2017+ allows # at the end of regular identifiers
  # This test covers tables, column aliases, table aliases, and qualified references
  pass_str: |
    CREATE TABLE orders# (
        order_id# INT,
        total# DECIMAL(10,2)
    );
    
    SELECT 
        o#.order_id# as id#,
        o#.total# as amount#
    FROM orders# as o#;
    
    DROP TABLE orders#;
  configs:
    core:
      dialect: tsql
